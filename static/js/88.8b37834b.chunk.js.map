{"version":3,"sources":["../../../src/web.ts"],"names":["StorageWeb","group","this","options","value","impl","getItem","applyPrefix","key","setItem","removeItem","keys","rawKeys","map","k","substring","prefix","length","e","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","get","push","set","window","localStorage"],"mappings":"wQAaaA,EAAb,iG,2BACUC,MAAQ,mBADlB,2KAIyB,kBADEA,EAH3B,EAG2BA,SAErBC,KAAKD,MAAQA,GALnB,0KASmBE,GATnB,8EAUUC,EAAQF,KAAKG,KAAKC,QAAQJ,KAAKK,YAAYJ,EAAQK,MAV7D,kBAYW,CAAEJ,UAZb,0KAemBD,GAfnB,iEAgBID,KAAKG,KAAKI,QAAQP,KAAKK,YAAYJ,EAAQK,KAAML,EAAQC,OAhB7D,6KAmBsBD,GAnBtB,iEAoBID,KAAKG,KAAKK,WAAWR,KAAKK,YAAYJ,EAAQK,MApBlD,kQAwBUG,EAAOT,KAAKU,UAAUC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAU,EAAKC,OAAOC,WAxBjE,kBA0BW,CAAEN,SA1Bb,sQA8BsBT,KAAKU,WA9B3B,IA8BI,2BAAWJ,EAAuB,QAChCN,KAAKG,KAAKK,WAAWF,GA/B3B,WAAAU,EAAA,2RAoCUC,EAAqB,GACrBC,EAAqB,GACrBC,EAAY,QACZV,EAAOW,OAAOX,KAAKT,KAAKG,MAAMkB,QAAO,SAAAT,GAAC,OAA6B,IAAzBA,EAAEU,QAAQH,MAvC9D,cAyCyBV,GAzCzB,gEAyCec,EAzCf,QA0CYjB,EAAMiB,EAAOV,UAAUM,EAAUJ,QACjCb,EAAiC,QAA5B,EAAGF,KAAKG,KAAKC,QAAQmB,UAAO,QAAI,GA3CjD,UA4C4CvB,KAAKwB,IAAI,CAAElB,QA5CvD,oBA8CkC,kBA9ClC,EA4CcJ,MA5Cd,iBA+CQgB,EAASO,KAAKnB,GA/CtB,yCAiDcN,KAAK0B,IAAI,CAAEpB,MAAKJ,UAjD9B,QAkDQe,EAASQ,KAAKnB,GAlDtB,mFAAAU,EAAA,mFAsDW,CAAEC,WAAUC,aAtDvB,8QA0DsB,QACZT,EAAOW,OAAOX,KAAKT,KAAKG,MAAMkB,QAAO,SAAAT,GAAC,OAA6B,IAAzBA,EAAEU,QADhC,YA1DtB,cA4DyBb,GA5DzB,IA4DI,2BAAWc,EAAgB,QACzBvB,KAAKG,KAAKK,WAAWe,GA7D3B,WAAAP,EAAA,uJAyEiB,WACb,OAAOI,OAAOX,KAAKT,KAAKG,MAAMkB,QAAO,SAAAT,GAAC,OAA+B,IAA3BA,EAAEU,QAAQ,EAAKR,aA1E7D,kCA6EsBR,GAClB,OAAON,KAAKc,OAASR,IA9EzB,2BAkEI,OAAOqB,OAAOC,eAlElB,6BAsEI,MAAsB,kBAAf5B,KAAKD,MAA4B,GAAjC,UAAyCC,KAAKD,MAA9C,SAtEX,G,MAAgC","file":"static/js/88.8b37834b.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  StoragePlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class StorageWeb extends WebPlugin implements StoragePlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"],"sourceRoot":""}