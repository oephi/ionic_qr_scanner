{"version":3,"sources":["../../../src/web.ts"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","DB_VERSION","DB_NAME","_writeCmds","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","store","transaction","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","tx","clear","options","getPath","dbRequest","entry","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readdir","readDirResult","files","entryPath","stat","deleteFile","rmdir","e","entries","names","map","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","a","readFile","file","writeFile","contents","filename","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","_debug"],"mappings":"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","file":"static/js/87.046eb59b.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    const data = options.data;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    // const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (occupiedEntry !== undefined) {\n      data = occupiedEntry.content + data;\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const names = entries.map(e => {\n      return e.substring(path.length + 1);\n    });\n    return { files: names };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    return this._copy(options, true);\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<void> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(options: CopyOptions, doRename = false): Promise<void> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return;\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        // Write the file to the new location\n        await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename}`,\n              to: `${to}/${filename}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: string;\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],"sourceRoot":""}